#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# Thanks to https://github.com/mfine/heroku-buildpack-stack/blob/master/bin/compile
# for the inspiration.

set -e
set -o pipefail

BUILD_DIR="$1"
CACHE_DIR="$2"

function speak (){
  echo "-----> $(date -u '+%Y-%m-%d_%H:%M:%S') $1"
}

speak "Starting..."

export LANG=en_US.UTF-8
# Make sure all the stack stuff ends up in the cache as well
# This will allow for faster compiles on subsequent pushes.
export STACK_ROOT=$CACHE_DIR/.stack

########## stack exe ###############################################
STACK_VER=${STACK_VER:-1.2.0}
STACK_URL=${STACK_URL:-https://github.com/commercialhaskell/stack/releases/download/v"$STACK_VER"/stack-"$STACK_VER"-linux-x86_64.tar.gz}
STACK_DIR="$CACHE_DIR/stack-$STACK_VER"
STACK_EXE="$STACK_DIR/stack"
if [ ! -e "$STACK_EXE" ]; then
  speak "Downloading stack-$STACK_VER"
  mkdir -p "$STACK_DIR"
  curl -# -L "$STACK_URL" | tar xz -C "$STACK_DIR" --strip-components=1
  chmod u+x $STACK_EXE
fi

########## project build ###########################################
STACK_DIR=".stack-work"
SANDBOX_DIR="$CACHE_DIR/$STACK_DIR"
if [ -e "$SANDBOX_DIR" ]; then
    speak "Restoring $STACK_DIR to $BUILD_DIR"
    cp -Rp "$SANDBOX_DIR" "$BUILD_DIR"
fi

speak "Running stack"
cd "$BUILD_DIR"
$STACK_EXE setup
$STACK_EXE build --fast

speak "Making stack binaries available"
mkdir -p "$BUILD_DIR/bin"
mv $($STACK_EXE path --local-install-root)/bin/* $BUILD_DIR/bin

speak "Writing out start script"
echo -e "---\ndefault_process_types:\n  web: /home/vcap/app/bin/`ls $BUILD_DIR/bin`" > $BUILD_DIR/startScript.yml

speak "Caching .stack-work"
rm -rf $SANDBOX_DIR
cp -Rp $BUILD_DIR/$STACK_DIR $SANDBOX_DIR

speak "Finished!"
